//
// Created by Scliang on 4/13/21.
//

#ifndef STARS_FBO_SHADER_H
#define STARS_FBO_SHADER_H

namespace media {

const char *vShaderStr =
        "#version 300 es                              \n"
        "layout(location = 0) in vec4 a_position;     \n"
        "layout(location = 1) in vec2 a_texCoord;     \n"
        "uniform mat4 u_MVPMatrix;                    \n"
        "out vec2 v_texCoord;                         \n"
        "void main()                                  \n"
        "{                                            \n"
        "    gl_Position = u_MVPMatrix * a_position;  \n"
        "    v_texCoord = a_texCoord;                 \n"
        "}";

//const char *fShaderStr =
//        "#version 300 es                                  \n"
//        "precision highp float;                           \n"
//        "in vec2 v_texCoord;                              \n"
//        "layout(location = 0) out vec4 outColor;          \n"
//        "uniform sampler2D s_Texture;                     \n"
//        "void main()                                      \n"
//        "{                                                \n"
//        "    outColor = texture(s_Texture, v_texCoord);   \n"
//        "}";

//const char *fShaderStr =
//        "#version 300 es                                                   \n"
//        "precision highp float;                                            \n"
//        "in vec2 v_texCoord;                                               \n"
//        "layout(location = 0) out vec4 outColor;                           \n"
//        "uniform float u_Offset;                                           \n"
//        "uniform sampler2D s_Texture;                                      \n"
//        "const float MAX_ALPHA = 0.5;                                      \n"
//        "const float MAX_SCALE = 0.8;                                      \n"
//        "void main()                                                       \n"
//        "{                                                                 \n"
//        "    float alpha = MAX_ALPHA * (1.0 - u_Offset);                   \n"
//        "    float scale = 1.0 + u_Offset * MAX_SCALE;                     \n"
//        "    float scale_x = 0.5 + (v_texCoord.x - 0.5) / scale;           \n"
//        "    float scale_y = 0.5 + (v_texCoord.y - 0.5) / scale;           \n"
//        "    vec2 scaleCoord = vec2(scale_x, scale_y);                     \n"
//        "    vec4 maskColor = texture(s_Texture, scaleCoord);              \n"
//        "    vec4 originColor = texture(s_Texture, v_texCoord);            \n"
//        "    outColor = originColor * (1.0 - alpha) + maskColor * alpha;   \n"
//        "}";

//const char *fShaderStr =
//        "#version 300 es                                        \n"
//        "precision highp float;                                 \n"
//        "in vec2 v_texCoord;                                    \n"
//        "layout(location = 0) out vec4 outColor;                \n"
//        "uniform float u_Offset;                                \n"
//        "uniform vec2 u_TexSize;                                \n"
//        "uniform sampler2D s_Texture;                           \n"
//        "void main()                                            \n"
//        "{                                                      \n"
//        "    vec2 newTexCoord = v_texCoord;                     \n"
//        "    if(newTexCoord.x < 0.5)                            \n"
//        "    {                                                  \n"
//        "        newTexCoord.x = newTexCoord.x * 2.0;           \n"
//        "    }                                                  \n"
//        "    else                                               \n"
//        "    {                                                  \n"
//        "        newTexCoord.x = (newTexCoord.x - 0.5) * 2.0;   \n"
//        "    }                                                  \n"
//        "                                                       \n"
//        "    if(newTexCoord.y < 0.5)                            \n"
//        "    {                                                  \n"
//        "        newTexCoord.y = newTexCoord.y * 2.0;           \n"
//        "    }                                                  \n"
//        "    else                                               \n"
//        "    {                                                  \n"
//        "        newTexCoord.y = (newTexCoord.y - 0.5) * 2.0;   \n"
//        "    }                                                  \n"
//        "                                                       \n"
//        "    outColor = texture(s_Texture, newTexCoord);        \n"
//        "}";

//const char *fShaderStr =
//        "#version 300 es                                  \n"
//        "precision highp float;                           \n"
//        "in vec2 v_texCoord;                              \n"
//        "layout(location = 0) out vec4 outColor;          \n"
//        "uniform sampler2D s_Texture;                     \n"
//        "vec2 scale(vec2 uv, float level)                 \n"
//        "{                                                \n"
//        "    vec2 center = vec2(0.5, 0.5);                \n"
//        "    vec2 newTexCoord = uv.xy;                    \n"
//        "    newTexCoord -= center;                       \n"
//        "    newTexCoord = newTexCoord / level;           \n"
//        "    newTexCoord += center;                       \n"
//        "    return newTexCoord;                          \n"
//        "}                                                \n"
//        "const float OFFSET_LEVEL = 0.05;                 \n"
//        "const float SCALE_LEVEL = 4.0;                   \n"
//        "void main()                                      \n"
//        "{                                                \n"
//        "    if(OFFSET_LEVEL < v_texCoord.x && v_texCoord.x < (1.0 - OFFSET_LEVEL)      \n"
//        "       && OFFSET_LEVEL < v_texCoord.y && v_texCoord.y < (1.0 - OFFSET_LEVEL))  \n"
//        "    {                                            \n"
//        "        vec2 newTexCoord = v_texCoord;           \n"
//        "        newTexCoord -= OFFSET_LEVEL;             \n"
//        "        newTexCoord = newTexCoord / (1.0 - 2.0 * OFFSET_LEVEL);               \n"
//        "        outColor = texture(s_Texture, newTexCoord);                           \n"
//        "    }                                            \n"
//        "    else                                         \n"
//        "    {                                            \n"
//        "        outColor = texture(s_Texture, scale(v_texCoord, SCALE_LEVEL));        \n"
//        "    }                                            \n"
//        "}";

//const char *fShaderStr =
//        "#version 300 es                                                  \n"
//        "precision highp float;                                           \n"
//        "in vec2 v_texCoord;                                              \n"
//        "layout(location = 0) out vec4 outColor;                          \n"
//        "uniform sampler2D s_Texture;                                     \n"
//        "uniform vec2 u_TexSize;                                          \n"
//        "uniform int u_FaceCount;                                         \n"
//        "uniform vec4 u_FaceRect;                                         \n"
//        "void main()                                                      \n"
//        "{                                                                \n"
//        "    float fx = u_FaceRect.x / u_TexSize.x;                       \n"
//        "    float fy = u_FaceRect.y / u_TexSize.y;                       \n"
//        "    float fz = u_FaceRect.z / u_TexSize.x;                       \n"
//        "    float fw = u_FaceRect.w / u_TexSize.y;                       \n"
//        "    float cw = 0.5 / u_TexSize.x;                                \n"
//        "    float ch = 0.5 / u_TexSize.y;                                \n"
//        "    if (((v_texCoord.x > fx - cw && v_texCoord.x < fx + cw)      \n"
//        "      || (v_texCoord.y > fy - ch && v_texCoord.y < fy + ch)      \n"
//        "      || (v_texCoord.x > fz - cw && v_texCoord.x < fz + cw)      \n"
//        "      || (v_texCoord.y > fw - ch && v_texCoord.y < fw + ch))     \n"
//        "      && (v_texCoord.x > fx - cw && v_texCoord.x < fz + cw       \n"
//        "       && v_texCoord.y > fy - ch && v_texCoord.y < fw + ch)      \n"
//        "      && u_FaceCount > 0)                                        \n"
//        "    {                                                            \n"
//        "        outColor = vec4(1.0, 1.0, 1.0, 1.0);                     \n"
//        "    }                                                            \n"
//        "    else                                                         \n"
//        "    {                                                            \n"
//        "        outColor = texture(s_Texture, v_texCoord);               \n"
//        "    }                                                            \n"
//        "}";

const char *fShaderStr =
        "#version 300 es                                                  \n"
        "precision highp float;                                           \n"
        "in vec2 v_texCoord;                                              \n"
        "layout(location = 0) out vec4 outColor;                          \n"
        "uniform sampler2D s_Texture;                                     \n"
        "uniform sampler2D s_LutTexture;                                  \n"
        "uniform vec2 u_TexSize;                                          \n"
        "uniform int u_FaceCount;                                         \n"
        "uniform vec4 u_FaceRect;                                         \n"
        "vec4 lut_filter(vec2 texCoord)                                   \n"
        "{                                                                \n"
        "    vec4 textureColor = texture(s_Texture, texCoord);            \n"
        "    float blueColor = textureColor.b * 63.0;                     \n"
        "    vec2 quad1;                                                  \n"
        "    quad1.y = floor(floor(blueColor) / 8.0);                     \n"
        "    quad1.x = floor(blueColor) - (quad1.y * 8.0);                \n"
        "    vec2 quad2;                                                  \n"
        "    quad2.y = floor(ceil(blueColor) / 7.9999);                   \n"
        "    quad2.x = ceil(blueColor) - (quad2.y * 8.0);                 \n"
        "    vec2 texPos1;                                                \n"
        "    texPos1.x = (quad1.x * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * textureColor.r);\n"
        "    texPos1.y = (quad1.y * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * textureColor.g);\n"
        "    vec2 texPos2;                                                \n"
        "    texPos2.x = (quad2.x * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * textureColor.r);\n"
        "    texPos2.y = (quad2.y * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * textureColor.g);\n"
        "    vec4 newColor1 = texture(s_LutTexture, texPos1);             \n"
        "    vec4 newColor2 = texture(s_LutTexture, texPos2);             \n"
        "    vec4 newColor = mix(newColor1, newColor2, fract(blueColor)); \n"
        "    return mix(textureColor, vec4(newColor.rgb, textureColor.w), 1.0);                 \n"
        "}                                                                \n"
        "void main()                                                      \n"
        "{                                                                \n"
        "    float fx = u_FaceRect.x / u_TexSize.x;                       \n"
        "    float fy = u_FaceRect.y / u_TexSize.y;                       \n"
        "    float fz = u_FaceRect.z / u_TexSize.x;                       \n"
        "    float fw = u_FaceRect.w / u_TexSize.y;                       \n"
        "    float cw = 0.5 / u_TexSize.x;                                \n"
        "    float ch = 0.5 / u_TexSize.y;                                \n"
        "    if (((v_texCoord.x > fx - cw && v_texCoord.x < fx + cw)      \n"
        "      || (v_texCoord.y > fy - ch && v_texCoord.y < fy + ch)      \n"
        "      || (v_texCoord.x > fz - cw && v_texCoord.x < fz + cw)      \n"
        "      || (v_texCoord.y > fw - ch && v_texCoord.y < fw + ch))     \n"
        "      && (v_texCoord.x > fx - cw && v_texCoord.x < fz + cw       \n"
        "       && v_texCoord.y > fy - ch && v_texCoord.y < fw + ch)      \n"
        "      && u_FaceCount > 0)                                        \n"
        "    {                                                            \n"
        "        outColor = vec4(1.0, 1.0, 1.0, 1.0);                     \n"
        "    }                                                            \n"
        "    else                                                         \n"
        "    {                                                            \n"
        "        outColor = lut_filter(v_texCoord);                       \n"
        "    }                                                            \n"
        "}";

} //namespace media

#endif //STARS_FBO_SHADER_H
